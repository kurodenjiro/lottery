{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","props","componentDidMount","eth","net","getId","networkId","deployedNetwork","LotteryContract","networks","lottery","Contract","abi","address","methods","manager","call","getPlayers","players","getBalance","options","balance","setState","contract","state","onSubmit","e","preventDefault","getAccounts","accounts","message","sendTransaction","from","to","value","utils","toWei","handleRevert","error","onChange","target","name","onClick","pickWinner","send","receipt","returnValues","events","PickWinnerEvent","winner","prize","this","className","length","fromWei","noValidate","placeholder","type","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ceff97ad.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from \"react\";\r\nimport LotteryContract from \"./contracts/Lottery.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      web3: null,\r\n      contract: null,\r\n      manager: '',\r\n      players: [],\r\n      balance: '',\r\n      value: '',\r\n      message:'',\r\n      winner: '',\r\n      prize: ''\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    const web3 = await getWeb3();\r\n    // Get the contract instance.\r\n    const networkId = await web3.eth.net.getId();\r\n    const deployedNetwork = LotteryContract.networks[networkId];\r\n    const lottery = new web3.eth.Contract(\r\n      LotteryContract.abi,\r\n      deployedNetwork && deployedNetwork.address,\r\n    );\r\n\r\n    const manager = await lottery.methods.manager().call();\r\n    const players = await lottery.methods.getPlayers().call();\r\n    const balance = await web3.eth.getBalance(lottery.options.address);\r\n\r\n    this.setState({manager: manager, players: players, balance, web3, contract: lottery});\r\n\r\n    console.log(this.state.balance);\r\n  }\r\n\r\n  // componentDidMount = async () => {\r\n  //   try {\r\n  //     // Get network provider and web3 instance.\r\n  //     const web3 = await getWeb3();\r\n\r\n  //     // Use web3 to get the user's accounts.\r\n  //     const accounts = await web3.eth.getAccounts();\r\n\r\n  //     // Get the contract instance.\r\n  //     const networkId = await web3.eth.net.getId();\r\n  //     const deployedNetwork = LotteryContract.networks[networkId];\r\n  //     const instance = new web3.eth.Contract(\r\n  //       LotteryContract.abi,\r\n  //       deployedNetwork && deployedNetwork.address,\r\n  //     );\r\n\r\n  //     // Set web3, accounts, and contract to the state, and then proceed with an\r\n  //     // example of interacting with the contract's methods.\r\n  //     this.setState({ web3, accounts, contract: instance }, this.runExample);\r\n  //   } catch (error) {\r\n  //     // Catch any errors for any of the above operations.\r\n  //     alert(\r\n  //       `Failed to load web3, accounts, or contract. Check console for details.`,\r\n  //     );\r\n  //     console.error(error);\r\n  //   }\r\n  // };\r\n\r\n\r\n  onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const accounts = await this.state.web3.eth.getAccounts();\r\n\r\n      this.setState({message: 'Waiting on transaction success ...'});\r\n  \r\n      await this.state.web3.eth.sendTransaction({\r\n        from:accounts[0],\r\n        to:this.state.lottery.options.address,\r\n        value:this.state.web3.utils.toWei(this.state.value,'ether')\r\n      })\r\n  \r\n      this.setState({message: 'You have beend entered'});\r\n\r\n    } catch (err) {\r\n      console.log(\"web3.eth.handleRevert =\", this.state.web3.eth.handleRevert)\r\n      console.error(err);\r\n      console.log(\"err.message =\",err.message);\r\n    }\r\n   \r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({[e.target.name]: e.target.value});\r\n  }\r\n\r\n  onClick = async (e) => {\r\n    e.preventDefault();\r\n    this.setState({message:'Waiting on transaction success ...'});\r\n\r\n    const accounts = await this.state.web3.eth.getAccounts();\r\n    const receipt = await this.state.lottery.methods.pickWinner().send({from: accounts[0]});\r\n    const returnValues = receipt.events.PickWinnerEvent.returnValues;\r\n\r\n    this.setState({winner: returnValues.winner, prize: returnValues.prize});\r\n\r\n    this.setState({message:'Waiting on transaction success ...'});\r\n  }\r\n\r\n  render() {\r\n     if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row mt-5\">\r\n          <div className=\"col-sm-6\">\r\n            <div className=\"App\">\r\n              <h1>Lottery Contract</h1>\r\n              <p>This contract is managed by:  {this.state.manager}</p> \r\n              <p>There are currently {this.state.players.length} people entered, compeiting to win {this.state.web3.utils.fromWei(this.state.balance,'ether')} ether</p>\r\n              <hr/>\r\n              <form onSubmit={this.onSubmit} noValidate>\r\n                <h4>Wanna try your luck?</h4>\r\n                <div className=\"form-group\">\r\n                  <label>Amount of ether to enter</label>\r\n                  <input name='value'\r\n                  onChange={this.onChange}\r\n                  value={this.state.value}\r\n                  className=\"form-control\"\r\n                  placeholder=\"Please enter exact amount(ether): 0.1\" />\r\n                </div>\r\n                <button className=\"btn btn-warning\" type='submit'>Enter</button>\r\n              </form>\r\n              <hr/>\r\n              <p>{this.state.message}</p>\r\n              <hr />\r\n              <h4>Ready to pick a winner?</h4>\r\n              <p>Winner: {this.state.winner}</p>\r\n              <p>Prize: {this.state.web3.utils.fromWei(this.state.prize,'ether')} ether</p>\r\n              <button className=\"btn btn-info\" onClick={this.onClick}>Pick winner</button>\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"col-sm-6\">\r\n            <div className=\"\">\r\n            <h2>User stories</h2>\r\n            <ul className=\"list-group text-success\">\r\n              <li className=\"list-group-item\">1. As a player, I want to pacticiate in the lotter with my ETH account</li>\r\n              <li className=\"list-group-item\">2. As a manager, I want to set the fixed amount to pacticiate in the Lottery</li>\r\n              <li className=\"list-group-item\">3. As a manager, I want to be able to pick the winner</li>\r\n              <li className=\"list-group-item\">4. As a manager, I want to take 10% as fee</li>\r\n              <li className=\"list-group-item\">5. As a player, I will take 90% as a prize of the lottery</li>\r\n            </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}